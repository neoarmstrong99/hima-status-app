import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  RefreshControl,
  TextInput,
  Modal,
  Alert,
  Share,
  Platform,
} from 'react-native';
import { router, useFocusEffect } from 'expo-router';
import { Plus, Users, Clock } from 'lucide-react-native';
import { getUser, setUser } from '@/lib/auth';
import { createGroup, getUserGroups, getGroupMembers, getGroupByInviteCode } from '@/lib/database';
import { Toast } from '@/components/Toast';

export default function HomeScreen() {
  const [user, setUserState] = useState(null);
  const [groups, setGroups] = useState([]);
  const [groupMembers, setGroupMembers] = useState({});
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [showNicknameModal, setShowNicknameModal] = useState(false);
  const [showCreateGroupModal, setShowCreateGroupModal] = useState(false);
  const [nickname, setNickname] = useState('');
  const [groupName, setGroupName] = useState('');
  const [inviteCode, setInviteCode] = useState('');
  const [showJoinGroupModal, setShowJoinGroupModal] = useState(false);
  const [toast, setToast] = useState({ visible: false, message: '', type: 'info' });

  const showToast = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
    setToast({ visible: true, message, type });
  };

  const loadUser = async () => {
    try {
      const userData = await getUser();
      if (userData) {
        setUserState(userData);
        await loadGroups(userData.id);
      } else {
        setShowNicknameModal(true);
      }
    } catch (error) {
      showToast('ユーザー情報の読み込みに失敗しました', 'error');
    }
  };

  const loadGroups = async (userId: string) => {
    try {
      setLoading(true);
      const userGroups = await getUserGroups(userId);
      const groupsData = userGroups.map(ug => ug.groups);
      setGroups(groupsData);

      // 各グループのメンバー数と暇人数を取得
      const membersData = {};
      for (const group of groupsData) {
        try {
          const members = await getGroupMembers(group.id);
          const freeCount = members.filter(m => m.status === 'free').length;
          membersData[group.id] = {
            total: members.length,
            free: freeCount,
          };
        } catch (error) {
          console.error(`Error loading members for group ${group.id}:`, error);
          membersData[group.id] = { total: 0, free: 0 };
        }
      }
      setGroupMembers(membersData);
    } catch (error) {
      showToast('グループの読み込みに失敗しました', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleSetNickname = async () => {
    if (!nickname.trim()) {
      showToast('ニックネームを入力してください', 'error');
      return;
    }

    try {
      const userData = await setUser(nickname.trim());
      setUserState(userData);
      setShowNicknameModal(false);
      setNickname('');
      showToast('ニックネームを設定しました', 'success');
    } catch (error) {
      showToast('ニックネームの設定に失敗しました', 'error');
    }
  };

  const handleCreateGroup = async () => {
    if (!groupName.trim()) {
      showToast('グループ名を入力してください', 'error');
      return;
    }

    try {
      const group = await createGroup(groupName.trim(), user.id, user.nickname);
      setShowCreateGroupModal(false);
      setGroupName('');
      
      // 招待リンクを表示
      const baseUrl = window.location.hostname === 'localhost' 
        ? window.location.origin 
        : 'https://yjccok1c9hnuklegyllfki6o5.bolt.host';
      const inviteUrl = `${baseUrl}/join/${group.invite_code}`;
      Alert.alert(
        'グループ作成完了',
        `グループ「${group.name}」を作成しました。\n\n招待コード: ${group.invite_code}`,
        [
          {
            text: '招待リンクを共有',
            onPress: () => shareInviteLink(inviteUrl, group.invite_code),
          },
          { text: 'OK', style: 'default' },
        ]
      );
      
      await loadGroups(user.id);
      showToast('グループを作成しました', 'success');
    } catch (error) {
      showToast('グループの作成に失敗しました', 'error');
    }
  };

  const handleJoinByCode = async () => {
    if (!inviteCode.trim()) {
      showToast('招待コードを入力してください', 'error');
      return;
    }

    try {
      const group = await getGroupByInviteCode(inviteCode.trim());
      setShowJoinGroupModal(false);
      setInviteCode('');
      
      // グループ参加ページに移動
      router.push(`/join/${group.invite_code}`);
    } catch (error) {
      if (error.message.includes('No rows')) {
        showToast('無効な招待コードです', 'error');
      } else {
        showToast('グループの検索に失敗しました', 'error');
      }
    }
  };

  const shareInviteLink = async (url: string, code: string) => {
    try {
      if (Platform.OS === 'web') {
        // Web環境ではクリップボードにコピー
        const message = `暇ステータス管理アプリのグループに参加してください！\n\n招待リンク: ${url}\n\n（招待コードで手動参加: ${code}）\n\n※リンクが動かない場合は、アプリを開いてから招待コードを手動入力してください`;
        await navigator.clipboard.writeText(message);
        showToast('招待リンクをクリップボードにコピーしました', 'success');
      } else {
        // モバイル環境では標準の共有機能を使用
        await Share.share({
          message: `暇ステータス管理アプリのグループに参加してください！\n\n招待コード: ${code}\nまたはリンク: ${url}`,
          url: url,
        });
      }
    } catch (error) {
      showToast(Platform.OS === 'web' ? 'クリップボードへのコピーに失敗しました' : '共有に失敗しました', 'error');
    }
  };

  const onRefresh = useCallback(() => {
    if (user) {
      setRefreshing(true);
      loadGroups(user.id).finally(() => setRefreshing(false));
    }
  }, [user]);

  useFocusEffect(
    useCallback(() => {
      loadUser();
    }, [])
  );

  const renderGroupItem = ({ item: group }) => {
    const memberInfo = groupMembers[group.id] || { total: 0, free: 0 };
    
    return (
      <TouchableOpacity
        style={styles.groupItem}
        onPress={() => {
          router.push(`/group/${group.id}`);
        }}
      >
        <View style={styles.groupHeader}>
          <View style={styles.groupIcon}>
            <Users size={20} color="#3B82F6" />
          </View>
          <View style={styles.groupInfo}>
            <Text style={styles.groupName}>{group.name}</Text>
            <View style={styles.groupStats}>
              <Clock size={12} color="#6B7280" />
              <Text style={styles.groupStatsText}>
                最終更新: {new Date(group.created_at).toLocaleDateString('ja-JP')}
              </Text>
            </View>
          </View>
        </View>
        <View style={styles.groupStatus}>
          <Text style={styles.statusText}>
            {memberInfo.free}/{memberInfo.total} 人が暇
          </Text>
          <Text style={styles.inviteCode}>#{group.invite_code}</Text>
        </View>
      </TouchableOpacity>
    );
  };

  if (showNicknameModal) {
    return (
      <View style={styles.container}>
        <Modal visible transparent animationType="slide">
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>ニックネームを入力</Text>
              <Text style={styles.modalSubtitle}>
                このアプリで使用するニックネームを入力してください
              </Text>
              <TextInput
                style={styles.textInput}
                value={nickname}
                onChangeText={setNickname}
                placeholder="ニックネーム"
                maxLength={20}
                autoFocus
              />
              <TouchableOpacity
                style={styles.primaryButton}
                onPress={handleSetNickname}
              >
                <Text style={styles.primaryButtonText}>設定</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>暇ステータス管理</Text>
        {user && (
          <Text style={styles.headerSubtitle}>こんにちは、{user.nickname}さん</Text>
        )}
      </View>

      <FlatList
        data={groups}
        keyExtractor={(item) => item.id}
        renderItem={renderGroupItem}
        contentContainerStyle={styles.groupsList}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        ListEmptyComponent={
          <View style={styles.emptyState}>
            <Users size={48} color="#9CA3AF" />
            <Text style={styles.emptyText}>
              まだグループに参加していません
            </Text>
            <Text style={styles.emptySubtext}>
              新しいグループを作成するか、招待コードで参加してください
            </Text>
          </View>
        }
      />

      <View style={styles.bottomActions}>
        <TouchableOpacity
          style={styles.inviteCodeFab}
          onPress={() => setShowJoinGroupModal(true)}
        >
          <Text style={styles.inviteCodeFabText}>招待コードで参加</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity
        style={styles.fab}
        onPress={() => setShowCreateGroupModal(true)}
      >
        <Plus size={24} color="white" />
      </TouchableOpacity>

      {/* グループ作成モーダル */}
      <Modal
        visible={showCreateGroupModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowCreateGroupModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>新しいグループを作成</Text>
            <TextInput
              style={styles.textInput}
              value={groupName}
              onChangeText={setGroupName}
              placeholder="グループ名"
              maxLength={50}
              autoFocus
            />
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={() => {
                  setShowCreateGroupModal(false);
                  setGroupName('');
                }}
              >
                <Text style={styles.secondaryButtonText}>キャンセル</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.primaryButton}
                onPress={handleCreateGroup}
              >
                <Text style={styles.primaryButtonText}>作成</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* 招待コードで参加モーダル */}
      <Modal
        visible={showJoinGroupModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowJoinGroupModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>招待コードで参加</Text>
            <Text style={styles.modalSubtitle}>
              友人からもらった招待コードを入力してください
            </Text>
            <TextInput
              style={styles.textInput}
              value={inviteCode}
              onChangeText={setInviteCode}
              placeholder="ABCD1234"
              maxLength={8}
              autoCapitalize="characters"
              autoFocus
            />
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={() => {
                  setShowJoinGroupModal(false);
                  setInviteCode('');
                }}
              >
                <Text style={styles.secondaryButtonText}>キャンセル</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.primaryButton}
                onPress={handleJoinByCode}
              >
                <Text style={styles.primaryButtonText}>参加</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <Toast
        visible={toast.visible}
        message={toast.message}
        type={toast.type}
        onHide={() => setToast({ ...toast, visible: false })}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  header: {
    backgroundColor: 'white',
    padding: 20,
    paddingTop: 60,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#6B7280',
  },
  groupsList: {
    padding: 16,
  },
  groupItem: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  groupHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  groupIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#EFF6FF',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  groupInfo: {
    flex: 1,
  },
  groupName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 4,
  },
  groupStats: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  groupStatsText: {
    fontSize: 12,
    color: '#6B7280',
    marginLeft: 4,
  },
  groupStatus: {
    alignItems: 'flex-end',
  },
  statusText: {
    fontSize: 14,
    color: '#10B981',
    fontWeight: '600',
  },
  inviteCode: {
    fontSize: 11,
    color: '#9CA3AF',
    marginTop: 2,
  },
  fab: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: '#3B82F6',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 8,
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#374151',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },
  bottomActions: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    right: 84, // FABのスペースを空ける
  },
  inviteCodeFab: {
    backgroundColor: '#10B981',
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  inviteCodeFabText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 24,
    width: '100%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 8,
    textAlign: 'center',
  },
  modalSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 20,
    textAlign: 'center',
    lineHeight: 20,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 20,
  },
  modalButtons: {
    flexDirection: 'row',
    gap: 12,
  },
  primaryButton: {
    flex: 1,
    backgroundColor: '#3B82F6',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
  },
  primaryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  secondaryButton: {
    flex: 1,
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
  },
  secondaryButtonText: {
    color: '#374151',
    fontSize: 16,
    fontWeight: '600',
  },
});
